1.
def f(n):
    if n <= 3: return n
    if n > 3 and n % 2 == 0: return 2*n + f(n - 1)
    if n > 3 and n % 2 != 0: return n*n + f(n - 2)

lst = [f(x) for x in range(1, 101) if f(x) % 3 == 0]
print(len(lst))

2.

def f(n):
    if n <= 3: return n
    if n > 3 and n % 2 == 0: return 2*n + f(n - 1)
    if n > 3 and n % 2 != 0: return n*n + f(n - 2)
c = 0
for i in range(1, 101):
    if f(i) % 3 == 0:
        c +=1
print(c)

3.

def f(n):
    if n <= 10: return n
    if n <= 36 and n > 10: return n // 4 + f(n - 10)
    if n > 36: return 2*f(n-5)
print(f(100))

4.

def f(n):
    if n == 1: return 1
    if n >= 2: return f(n - 1) + 3*g(n-1)

def g(n):
    if n == 1: return 1
    if n >= 2: return f(n - 1) - 2*g(n-1)
print(f(18))
плюсы между цифр в калькуляторе
5.

def f(n):
    if n == 1: return 1
    if n >= 2: return f(n - 1) + 3*g(n-1)

def g(n):
    if n == 1: return 1
    if n >= 2: return f(n - 1) - 2*g(n-1)
print(f(18))
s = sum([int(x) for x in str(f(18))])
print(s)

6.



from functools import *

@lru_cache
def f(n):
    if n == 1: return 1
    if n >= 2: return f(n-1) - 2*g(n-1)

def g(n):
    if n == 1: return 1
    if n >= 2: return f(n-1) + g(n-1) + n
print(g(36))

7.


def f(n):
    if n < 2: return 1
    if n >= 2 and n % 2 == 0: return f(n/2) + 1
    if n >=2 and n % 2 != 0: return f(n - 3) + 3

c = 0
for n in range(1, 10001):
    if f(n) == 12:
        c+= 1
print(c)

8.

def f(n):
    if n < 2: return 1
    if n >= 2 and n % 3 == 0: return f(n/3) + 1
    if n >=2 and n % 3 != 0: return f(n - 2) + 5

c = 0
for n in range(1, 10000):
    if f(n) == 73:
        print(n)
        break
9.

from sys import *
from functools import *
setrecursionlimit(10000000)
@lru_cache
def f(n):
    if n == 1: return 1
    if n > 1: return f(3*n + 5)*f(n-1)
print( f(2073)/ f(2070))
